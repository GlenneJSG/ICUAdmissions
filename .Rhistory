library(kableExtra)
library(sjlabelled)
library(sjmisc)
library(devtools)
devtools::install_github("strengejacke/strengejacke")
library(strengejacke)
library(sjPlot)
library(sjstats, pos=22)
library(ggplot2)
library(qwraps2)
library(gplots)
library(data.table)
library(tidyverse)
library(kableExtra)
library(ggthemes)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(ggplot2)
library(Rcmdr)
library(car)
library(RcmdrMisc)
library (ggplot2)
library (sjPlot)
library (multcomp)
library (multcompView)
library (DescTools)
library (tidyr)
library (plotly)
icu <- read.table("icu_factored.csv", header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
icu <- within(icu, {
Consciousness <-
factor(Consciousness,
labels=c('Conscious',
'Unconscious', 'Unconscious'))
})
local({
.Table <- with(icu, table(Cancer))
cat("\ncounts:\n")
print(.Table)
cat("\npercentages:\n")
print(round(100*.Table/sum(.Table),2))
.Probability <- c(0.5,0.5)
chisq.test(.Table, p=.Probability)
})
ggplot(data.frame(icu), aes(x=icu$Status)) +
geom_bar(fill="cadetblue2")+
labs(x = "Status", y= "Frequency")
local({
.Table <- with(icu, table(Status))
cat("\ncounts:\n")
print(.Table)
cat("\npercentages:\n")
print(round(100*.Table/sum(.Table),2))
.Probability <- c(0.5,0.5)
chisq.test(.Table, p=.Probability)
})
View(icu)
mytable <- table(icu$Sex)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart of Distribution by Sex")
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = 20)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(data),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main="Pie Chart of Distribution by Sex")
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(data),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", input$dataset) )
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
reactive(main=paste("Pie Chart of Distribution by", input$dataset) ))
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", input$dataset) )
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", icu$(input$dataset)) )
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", icu[input$dataset]) )
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data<-input$dataset
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(input$dataset)
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", data) )
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(input$dataset)
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
main=paste("Pie Chart of Distribution by", data)
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(input$dataset)
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls,
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"), selected = "Status")
data <- reactive(input$dataset)
dataset <- reactive(icu[input$dataset])
renderPlot(
mytable <- table(dataset),
lbls <- paste(names(mytable), "\n", mytable, sep=""),
pie(mytable, labels = lbls)
)
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
dataset <- reactive(icu[input$dataset])
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
attr <- reactive(icu[input$dataset])
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
attr <- reactive(subset(icu, icu[,1]==input$dataset]))
library(shiny)
selectInput("dataset", "Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
attr <- reactive(subset(icu, icu[,1]==input$dataset))
library(shiny)
renderPlot(
bp<- ggplot(icu, aes(x="", y=value, fill=input$choice))+
geom_bar(width = 1, stat = "identity"),
pie <- bp + coord_polar("y", start=0)
pie
)
library(shiny)
renderPlot(
bp<- ggplot(icu, aes(x="", y=value, fill=input$choice))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
)
library(shiny)
selectInput("choice", label="Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
library(shiny)
renderPlot({
bp<- ggplot(icu, aes(x="", y=value, fill=input$choice))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
}
)
mytable <- table(icu$Sex)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart of Distribution by Sex")
library(shiny)
selectInput("choice", label="Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
choice <- reactive(icu[input$choice])
library(shiny)
selectInput("choice", label="Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
choice <- icu[input$choice]
library(shiny)
renderPlot({
mytable <- table(input$choice)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls
)
}
)
library(shiny)
selectInput("choice", label="Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
choice <- icu[input$choice]
library(shiny)
selectInput("choice", label="Choose an attribute:",
choices = c("Status","Age","Sex","Race","Service","Cancer","Renal", "Infection","CPR","Systolic","HeartRate","Previous","Type", "Fracture", "PO2", "PH","PCO2", "Bicarbonate","Creatinine", "Consciousness"),
selected = "Status")
choice <- input$choice
library(shiny)
renderPlot({
mytable <- table(input$choice)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls)
}
)
install.packages("lessR")
labs <- c(paste(seq(0, 95, by = 5), seq(0 + 5 - 1, 100 - 1, by = 5),
sep = "-"), paste(100, "+", sep = ""))
icu$AgeGroup <- cut(icu$Age, breaks = c(seq(0, 100, by = 5), Inf), labels = labs, right = FALSE)
SurT<-table(icu$Status)
round(100*prop.table(SurT),digits=0)
cross<-table(icu$Status,icu$AgeGroup)
round(prop.table(cross,2)*100,digits=0)
barplot(prop.table(cross,2)*100,
xlab='Age',ylab='Percentages',main="Percentage survival by
Age",col=c("lightblue","lightcyan"),
legend=rownames(cross), args.legend = list(x = "topright"))
library(shiny)
renderPlot({
ggplot(icu, aes(x=choice()))+
geom_density(color="darkblue", fill="lightblue")+
ylab("Density") + xlab(choice())
}
)
library(shiny)
renderPlot({
ggplot(icu, aes(x=choice()))+
geom_density(color="darkblue", fill="lightblue")+
ylab("Density")
}
)
knitr::opts_chunk$set(echo = FALSE)
icu <- read.table("icu_factored.csv", header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
icu <- within(icu, {
Consciousness <-
factor(Consciousness,
labels=c('Conscious',
'Unconscious', 'Unconscious'))
})
library(Rcmdr)
library(car)
library(RcmdrMisc)
library (ggplot2)
library (sjPlot)
library (multcomp)
library (multcompView)
library (DescTools)
library (tidyr)
library(rsample, pos=21)
library(sjstats)
library(ggplot2, pos=18)
library(sjPlot, pos=19)
library(randomForest, pos=20)
library(tidyr, pos=21)
library(rsample, pos=21)
library(DT, pos=23)
library(dplyr)
library(jtools)
library(magrittr)
library(RcmdrMisc)
library(Rcmdr)
library(kableExtra)
library(sjlabelled)
library(sjmisc)
library(devtools)
devtools::install_github("strengejacke/strengejacke")
library(strengejacke)
library(sjPlot)
library(sjstats, pos=22)
library(ggplot2)
library(qwraps2)
library(gplots)
library(data.table)
library(tidyverse)
library(kableExtra)
library(ggthemes)
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(ggplot2)
library(Rcmdr)
library(car)
library(RcmdrMisc)
library (ggplot2)
library (sjPlot)
library (multcomp)
library (multcompView)
library (DescTools)
library (tidyr)
options(qwraps2_markup = "markdown")
normalityTest(~Age, test="shapiro.test", data=icu)
with(icu, qqPlot(Age, dist="norm", id=list(method="y", n=2,
labels=rownames(icu))))
library(dplyr)
myfun <- function(x, group) {
data.frame(x, group) %>%
group_by(group) %>%
summarise(
statistic = ifelse(sd(x)!=0,shapiro.test(x)$statistic,NA),
p.value = ifelse(sd(x)!=0,shapiro.test(x)$p.value,NA)
)
}
(lst <- lapply(icu[,-1], myfun, group=icu[,1]))
selectInput("choice5", label="Choose an attribute:",
choices = c("Status","Sex","Race","Service","Cancer","Renal","Infection","CPR","Type","Fracture","PO2","PH","Cancer","Creatinine", "Consciousness","PC02"),
selected = "Status")
choice5 <- reactive({toString(input$choice5)})
renderPlot({
ggplot(data.frame(icu), aes(x=choice5())) +
geom_bar(fill="cadetblue2")+
labs(x = "y", y= "p")
})
renderTable({
.Table <- with(icu, table(choice5()))
cat("\ncounts:\n")
print(.Table)
cat("\npercentages:\n")
print(round(100*.Table/sum(.Table),2))
.Probability <- c(0.5,0.5)
chisq.test(.Table, p=.Probability)
})
devtools::install_git("https://sr.ht/~hrbrmstr/markdowntemplates")
devtools::install_git("https://gitlab.com/hrbrmstr/markdowntemplates")
install.packages("markdowntemplates")
require(ggplot2)
selectInput("choice5", label="Choose an attribute:",
choices = c("Status","Sex","Race","Service","Cancer","Renal","Infection","CPR","Type","Fracture","PO2","PH","Cancer","Creatinine", "Consciousness","PC02"),
selected = "Status")
choice5 <- reactive({
a<-Subset(columns=input$choice5, data=icu )
return(a)
})
renderPlot({
mytable <- data.frame(choice5())
ggplot(data=choice5,aes()) +
geom_bar(fill="cadetblue2") +
labs(title=input$choice5)
})
View(lst)
mytable
lbls
as.data.frame(mytable)
DemographicModel <- glm(Status ~ Age +
+ Race  + Sex , family=binomial(logit),
data=icu)
tab_model(DemographicModel)
plot_model(DemographicModel, show.values=TRUE, value.offset = .3)
##lets look at just age
DemographicModel <- glm(Status ~ Age, family=binomial(logit),
data=icu)
tab_model(DemographicModel)
plot_model(DemographicModel, show.values=TRUE, value.offset = .3)
AdmissionsModel <- glm(Status ~   Consciousness + CPR +
+ Previous + Service + Type, family=binomial(logit),
data=icu)
tab_model(AdmissionsModel)
plot_model(AdmissionsModel, show.values=TRUE, value.offset = .3)
##From this we keep Consciousness and Type
AdmissionsModel2 <- glm(Status ~   Consciousness +
Type, family=binomial(logit),
data=icu)
tab_model(AdmissionsModel2)
plot_model(AdmissionsModel2, show.values=TRUE, value.offset = .3)
##Still both significant
ClinicalModel <- glm(Status ~  Bicarbonate + Cancer +
Creatinine + Fracture + HeartRate + Infection + PCO2 + PH + PO2 + Renal  +  Systolic , family=binomial(logit),
data=icu)
tab_model(ClinicalModel)
plot_model(ClinicalModel, show.values=TRUE, value.offset = .3)
##From this we keep Systolic
ClinicalModel2 <- glm(Status ~    Systolic , family=binomial(logit),
data=icu)
tab_model(ClinicalModel2)
plot_model(ClinicalModel2, show.values=TRUE, value.offset = .3)
FullModel <- glm(Status ~ Age + Bicarbonate + Cancer + Consciousness + CPR +
Creatinine + Fracture + HeartRate + Infection + PCO2 + PH + PO2 + Previous
+ Race + Renal + Service + Sex + Systolic + Type, family=binomial(logit),
data=icu)
tab_model(FullModel)
plot_model(FullModel, show.values=TRUE, value.offset = .3)
##From this we keep age Cancer and Consciousness and Type
FullModel2 <- glm(Status ~ Age  + Cancer + Consciousness +Type, family=binomial(logit),
data=icu)
tab_model(FullModel2)
plot_model(FullModel2, show.values=TRUE, value.offset = .3)
##From this we keep age Cancer and Consciousness and Type
stepwise(FullModel, direction='forward/backward', criterion='BIC')
##doesn't get Cancer
icu <- within(icu, {fitted.GLM.7 <- fitted(GLM.7)
})
icu <- within(icu, {fitted.FullModel2 <- fitted(FullModel2)
})
set.seed(0)
train_test_split <- initial_split(icu, prop = 0.7)
train <- training(train_test_split)
test <- testing(train_test_split)
Train <- glm(Status ~  Age + Type + Consciousness,
family=binomial(logit), data=train)
tab_model(Train)
Train <- glm(Status ~  Age + Type + Consciousness,
family=binomial(logit), data=train)
tab_model(Train)
predicted <- predict(Train, newdata=test  ) # #
actual <- test$Status  # actual Intention to Return for the testing sample
x <- as.data.frame(cbind(actual, predicted))
cor.test(x$actual,x$predicted) # hypothesis test for correlation
library(ggplot2)
ggplot(data=x, aes(x=predicted, y=actual)) + geom_jitter(width=0.15) + geom_smooth(method=lm)
actualvpredict <- lm(actual ~ predicted, x)
tab_model(actualvpredict)
cor.test(x$actual,x$predicted) # hypothesis test for correlation
mydataframe
wt <- wilcox.test(mpg ~ am, data = mtcars, conf.int = TRUE, exact = FALSE)
tidy(wt)
wt <- wilcox.test(mpg ~ am, data = mtcars, conf.int = TRUE, exact = FALSE)
tidy(wt)
install.packages("shapiro.qqnorm")
install.packages("epiDisplay")
renderPlot({
mydataframe<-data.frame(choice6())
shapiro.qqnorm(mydataframe[,1], ylab=input$choice6)
})
library (Hmisc)
rcorr.adjust(icu[,
c("Age","HeartRate","Systolic"
)], type="spearman",
use="complete")
library (Hmisc)
sjp.corr(icu[,c("Age","HeartRate","Systolic")], corr.method="spearman")
rcorr.adjust(icu[,
c("Age","HeartRate","Systolic"
)], type="spearman",
use="complete")
sjp.corr(icu[,c("Age","HeartRate","Systolic")], corr.method="spearman")
rcorr.adjust(icu[,
c("Age","HeartRate","Systolic"
)], type="spearman",
use="complete")
library(plotly)
p <- ggplot(icu, aes(HeartRate,Systolic)) + geom_point()
ggplotly(p)
library(corrplot)
icu_notfactored <- read.csv("http://cybr.mcmaster.ca/eH705_W2019/ICUAdmissions.csv")
res1 <- cor.mtest(icu_notfactored, conf.level = .95)
M <- cor(icu_notfactored)
corrplot(M, method = "square",p.mat = res1$p, sig.level = 0.05)
AdmissionsModel <- glm(Status ~   Consciousness + CPR +
+ Previous + Service + Type, family=binomial(logit),
data=icu)
tab_model(AdmissionsModel)
plot_model(AdmissionsModel, show.values=TRUE, value.offset = .3)
##From this we keep Consciousness and Type
stepwise(FullModel, direction='forward/backward', criterion='BIC')
##doesn't get Cancer
View(icu)
FullModel <- glm(Status ~ Age + Bicarbonate + Cancer + Consciousness + CPR +
Creatinine + Fracture + HeartRate + Infection + PCO2 + PH + PO2 + Previous
+ Race + Renal + Service + Sex + Systolic + Type, family=binomial(logit),
data=icu)
stepwise(FullModel, direction='forward/backward', criterion='BIC')
##doesn't get Cancer
FullModel <- glm(Status ~ Age + Bicarbonate + Cancer + Consciousness + CPR +
Creatinine + Fracture + HeartRate + Infection + PCO2 + PH + PO2 + Previous
+ Race + Renal + Service + Sex + Systolic + Type, family=binomial(logit),
data=icu)
